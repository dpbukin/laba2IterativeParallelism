n = 15; // Пример размера матрицы (можно использовать любой другой размер)
        matrix = repetitiveRowsMatrix(n);

        long startTime = System.currentTimeMillis();
        int determinantSingle = calculateDeterminant(matrix);
        long singleTime = System.currentTimeMillis() - startTime;

        startTime = System.currentTimeMillis();
        int determinantParallel = calculateDeterminantParallel(matrix);
        long parallelTime = System.currentTimeMillis() - startTime;

        System.out.println("Время однопоточного выполнения: " + singleTime + " мс");
        System.out.println("Время параллельного выполнения: " + parallelTime + " мс");

        System.out.println("Результат однопоточного выполнения: " + determinantSingle);
        System.out.println("Результат параллельного выполнения: " + determinantParallel);
    }

    public static int[][] repetitiveRowsMatrix(int n) {
        int[][] repetitiveMatrix = new int[n][n];

        for (int i = 0; i < n; i++) {
            Arrays.fill(repetitiveMatrix[i], 1);
        }

        return repetitiveMatrix;
    }

    public static int calculateDeterminant(int[][] matrix) {
        int size = matrix.length;

        if (size == 1) {
            return matrix[0][0];
        }

        return IntStream.range(0, size)
                .map(i -> (int) Math.pow(-1, i) * matrix[0][i] * calculateDeterminant(minor(matrix, 0, i)))
                .sum();
    }

    public static int calculateDeterminantParallel(int[][] matrix) {
        DeterminantThread[] threads = new DeterminantThread[n];

        for (int i = 0; i < n; i++) {
            threads[i] = new DeterminantThread(i, matrix);
            threads[i].start();
        }

        int determinantParallel = Arrays.stream(threads)
                .mapToInt(thread -> thread.getResult())
                .sum();

        Arrays.stream(threads).forEach(thread -> {
            try {
                thread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });

        return determinantParallel;
    }

    private static int[][] minor(int[][] matrix, int row, int col) {
        int size = matrix.length;
        int[][] minorMatrix = new int[size - 1][size - 1];

        for (int i = 0, k = 0; i < size; i++) {
            if (i == row) continue;

            for (int j = 0, l = 0; j < size; j++) {
                if (j == col) continue;

                minorMatrix[k][l] = matrix[i][j];
                l++;
            }

            k++;
        }

        return minorMatrix;
    }

    static class DeterminantThread extends Thread {
        private final int rowIndex;
        private final int[][] matrix;
        private int result;

        DeterminantThread(int rowIndex, int[][] matrix) {
            this.rowIndex = rowIndex;
            this.matrix = matrix;
        }

        @Override
        public void run() {
            result = calculateDeterminant(minor(matrix, rowIndex, 0));
        }

        public int getResult() {
            return result;
        }
    }